from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from app.database import crud, sessions, models
import matplotlib.pyplot as plt
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("report"))
async def report_handler(message: Message):
    async with sessions.AsyncSessionLocal() as db:
        user = await crud.get_or_create_user(db, message.from_user.id)
        if not user.is_admin:
            return

        conversations = db.query(models.Conversation).filter(
            models.Conversation.is_successful == False
        ).all()

        if not conversations:
            await message.answer("‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
            return

        for conv in conversations:
            
            await db.refresh(conv, ['user'])

            
            history = "\n".join([f"{'Bot' if m['is_bot'] else 'User'}: {m['text']}" for m in conv.messages])
            await message.answer(
                f"üÜò –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É #ID{conv.id}\n"
                f"User ID: {conv.user.telegram_id}\n"
                f"–ò—Å—Ç–æ—Ä–∏—è:\n{history}"
            )


async def is_admin(message: Message) -> bool:
    async with sessions.AsyncSessionLocal() as db:
        user = await crud.get_or_create_user(db, message.from_user.id)
        return user.is_admin


# @router.message(Command("add_admin"))
# async def add_admin_handler(message: Message, command: CommandObject):
#     if not await is_admin(message):
#         return
#
#     if not command.args or not command.args.isdigit():
#         return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /add_admin <user_id>")
#
#     target_id = int(command.args)
#     async with sessions.AsyncSessionLocal() as db:
#         target_user = await crud.update_user_admin_status(db, target_id, True)
#
#     if target_user:
#         await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
#         await message.bot.send_message(
#             target_id,
#             "üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
#         )
#     else:
#         await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
#
#
# @router.message(Command("remove_admin"))
# async def remove_admin_handler(message: Message, command: CommandObject):
#     if not await is_admin(message):
#         return
#
#     if not command.args or not command.args.isdigit():
#         return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /remove_admin <user_id>")
#
#     target_id = int(command.args)
#     if message.from_user.id == target_id:
#         return await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
#
#     async with sessions.AsyncSessionLocal() as db:
#         target_user = await crud.update_user_admin_status(db, target_id, False)
#
#     if target_user:
#         await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ª–∏—à–µ–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
#         await message.bot.send_message(
#             target_id,
#             "üòû –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã"
#         )
#     else:
#         await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


# app/database/crud.py
from sqlalchemy.future import select
from sqlalchemy import func, and_
from datetime import datetime, timedelta
from io import BytesIO


async def get_conversation_stats(db, period:int = 7):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    now = datetime.now()
    start_date = now - timedelta(days=period)
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    stmt = (
        select(
            models.Conversation.category,
            func.count(models.Conversation.id).label('count')
        )
        .where(
            and_(
                models.Conversation.start_time >= start_date,
                models.Conversation.end_time.is_not(None)
            )
        )
        .group_by(models.Conversation.category)
    )

    result = await db.execute(stmt)
    stats = result.all()

    return {category: count for category, count in stats}


async def generate_category_pie_chart(db, period: int = 7):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_conversation_stats(db, period)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    categories = list(stats.keys())
    counts = list(stats.values())

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 8))
    plt.pie(
        counts,
        labels=categories,
        autopct='%1.1f%%',
        startangle=90,
        colors=plt.cm.Paired.colors,
        wedgeprops={'edgecolor': 'white', 'linewidth': 0.5}
    )
    plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n(–ü–µ—Ä–∏–æ–¥: {period} –¥–Ω–µ–π)', pad=20)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –∏ –æ—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)  # –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
    plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏

    return buf


async def get_total_conversations(db, period: int = 7) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    now = datetime.now()
    start_date = now - timedelta(days=period)

    stmt = (
        select(func.count(models.Conversation.id))
        .where(
            and_(
                models.Conversation.start_time >= start_date,
                models.Conversation.end_time.is_not(None)
            )
        )
    )

    result = await db.execute(stmt)
    return result.scalar()


async def generate_total_conversations_plot(db, period: int = 7) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∏–∞–ª–æ–≥–æ–≤"""
    total = await get_total_conversations(db, period)

    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    plt.style.use('seaborn')
    plt.rcParams['font.family'] = 'DejaVu Sans'
    fig, ax = plt.subplots(figsize=(8, 4))

    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    ax.text(
        0.5, 0.6,
        f'{total}',
        fontsize=48,
        ha='center',
        va='center',
        color='#2c7bb6'
    )
    ax.text(
        0.5, 0.3,
        f'–¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ {period} –¥–Ω–µ–π',
        fontsize=14,
        ha='center',
        va='center',
        color='#4a4a4a'
    )

    # –£–±–∏—Ä–∞–µ–º –æ—Å–∏
    ax.axis('off')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = BytesIO()
    plt.savefig(
        buf,
        format='png',
        dpi=100,
        bbox_inches='tight',
        pad_inches=0.2
    )
    buf.seek(0)
    plt.close(fig)

    return buf








